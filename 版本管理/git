git安装：
    客户端和服务器端相同：
    window:
        https://git-for-windows.github.io下载安装
    linux：
        > yum -y install git
使用前设置用户邮箱：
    > git config --global user.name '7csn'
    > git config --global user.email '1479672753@qq.com'
设置编码：
    $ git config --global core.autocrlf false           # 禁止转换换行符（不同系统换行符不同）
    $ git config --global core.quotepath false          # 显示 status 编码
    $ git config --global gui.encoding utf-8            # 图形界面编码
    $ git config --global i18n.commit.encoding utf-8    # 提交信息编码
    $ git config --global i18n.logoutputencoding utf-8  # 输出 log 编码
    $ export LESSCHARSET=utf-8
    # 最后一条命令是因为 git log 默认使用 less 分页，所以需要 bash 对 less 命令进行 utf-8 编码
基本操作(项目根目录)：
    git仓库初始化：
        > git init
    创建文件：
        > echo readme > readme.md
    提交暂存区：
        > git add readme.md
    提交仓库：
        > git commit -m '创建readme.md'
    查看(暂存区和仓库、工作区和暂存区)不同文件：
        > git status
    查看文件差异操作:
        查看工作区和暂存区(暂存区无该文件时无返回信息)：
            > git diff readme.md
        查看工作区和版本库(版本库HEAD无该文件时无返回信息)：
            > git diff HEAD -- readme.md
    工作区文件回退(缓存区同化工作区):
        > git checkout -- readme.md
        # 执行1次，内容回退，但git status仍有提示，两次ok。不知是否BUG
    暂存区文件回退(工作区同化暂存区，工作区无该文件报错):
        > git reset HEAD readme.md
    改名文件(暂存区同化(文件名)工作区，暂存区无该文件报错)：
        > git mv readme.md readme.txt
        > git commit -m 'readme.md => readme.txt'
    删除文件(暂存区同化工作区，暂存区无该文件报错)：
        > git rm readme.txt
        > git commit -m '删除readme.txt'
    注：git管理过程中，存在于暂存区或版本仓库的文件，不要直接删改，最好通过git命令
分支管理：
    查看分支：
        > git branch
    创建分支：
        > git branch dev
    切换分支：
        > git checkout dev
    创建并切换分支：
        > git checkout -b dev
    删除分支：
        > git branch -d dev
    合并dev分支到当前：
        > git merge dev
    禁Fast forward(删除分支，会丢失分支信息，禁用后，合并时生成新的commit)模式合并分支：
        > git merge --no-ff -m 'merge dev with no-ff' dev
    强删未合并的分支：
        > git branch -D feature
    常用分支：
        1. master
            主分支，仅用来发布稳定版
        2. dev
            工作分支，大家在工作分支合并到dev，版本发布时，dev合并到master
        3. bug
            当需要修复bug时，隐藏当前工作现场：
                > git stash
            切换到需要修复bug的分支(如master)，创建bug分支并开始修复：
                > git checkout master
                > git checkout -b bug-001
                ...
            合并bug分支到master，并切换回原有分支(如dev)：
                > git checkout master
                > git merge --no-off -m 'merge bug-001' bug-001
                > git checkout dev
            查看工作现场：
                > git stash list
                    stash@{0}:....
            恢复工作现场，并删除记录：
                > git stash apply stash@{0} # 恢复指定现场，指定对象可省
                > git stash drop            # 删除记录
                或：
                > git stash pop             # 恢复现场并删除记录
        4. feature
            功能分支，每添加一个新功能，创建一个feature分支，完成后合并删除。
            过程同bug，只是在dev分支基础上。
查看日志：
    查看项目日志：
        > git log
    查看某文件或目录日志：
        > git log 路径
    日志单行显示：
        > git log --pretty=oneline
    分支合并日志：
        > git log --graph --pretty=oneline --abbrev-commit
版本相关：
    查看版本：
        > git reflog
            5d5df85 HEAD@{0}: commit: four
            6207e59 HEAD@{1}: commit: three
            70110b9 HEAD@{2}: commit: two
            bc65223 HEAD@{3}: commit (initial): one
    切换版本(同化暂存区和工作区，不包括版本中不含的文件)：
        > git reset --hard HEAD^
        > git reset --hard HEAD^^
        > git reset --hard HEAD~3
        > git reset --hard 7011  # 至少四位唯一日志串
标签管理：
    创建标签：
        > git checkout master
        > git tag v1.0                         # 打标签
        > git tag                              # 查看所有标签
        > git tag v0.9 bc65                    # 给指定版本补上标签
        > git show v0.9                        # 查看v0.9版本相关信息
        > git tag -a v0.1 -m '标签说明' bc65
        > git tag -s v0.2 -m '私钥签名' 7011　　 # PGP签名，需安装pgp(GnuPG)
    操作标签：
        > git tag -d v0.1                      # 删除标签
        > git push 远程名 v1.0                  # 推送指定标签到远程
        > git push 远程名 --tags                # 推送所有标签到远程
        > git push 远程名 :refs/tags/v0.9       # 从远程删除指定标签
非空项目变成仓库：
    > git init
    > git add -A
    > git commit -m 'init'
远程相关操作：
    设置远程仓库(默认master分支)：
        1. 仓库中
            > git remote add 远程名 远程仓库地址
        2. 非仓库
            > git clone -o 远程名 远程仓库地址 存放目录
    创建远程远程分支到本地(dev为例)：
        > git checkout -b dev 远程名/dev
    指定本地分支与远程分支链接(dev为例):
        > git branch --set-upstream dev 远程名/dev
        # 指定后git pull命令不需指明远程和分支
    修改远程仓库名称：
        > git remote rename 旧名称 新名称
    查看远程仓库：
        > git remote
        > git remote -v     # 查看远程地址
    删除远程仓库：
        > git remote remove 远程名
    推送远程(-u非首次可省)：
        > git push -u 远程名 远程分支
    拉至本地：
        > git pull 远程名 远程分支
    仓库接收推送许可：
        > vim .git/config
            [receive]
                denyCurrentBranch = false
        # 接收推送后，查看仓库工作区变化，须执行一次：
            > git reset --hard
github等仓库SSH Key：
    1. 查看用户主目录是否有.ssh目录，其中是否有id_rsa和id_rsa.pub文件
        若无：
            > ssh-keygen -t rsa -C "本人邮件"   # 一路回车
    2. 将id_rsa.pub内的公钥添加到各开源仓库开放设置中。
        如果是自定义远程：
            1. 创建git用户
            2. 将所有程序员公钥导入git用户根目录下.ssh/authorized_keys，一行一个
            3. 创建git仓库，修改用户组为git
            4. 禁用shell登录:
                将/etc/passwd文件中git用户对应的执行解释器由/bin/bash改为/usr/bin/git-shell
                如此，git用户可正常通过ssh使用git，但无法登录shell
自定义git：
    > git config --global color.ui true     # 配置颜色
忽略特殊文件：
    忽略原则：
        1. 操作系统自动生成的文件，如缩略图
        2. 忽略编译生成的中间文件、可执行新文件
        3. 忽略敏感信息配置文件，如存放口令密码的文件
    工作区根目录创建文件.gitignore(window通过文件保存形式创建，直接创建无名文件不易)
        > vim .gitignore
            忽略文件或目录
            ...
    将.gitignore提交到仓库
        > git add .gitignore
        > git commit -m '忽略列表'
    强制提交暂存区：
        > git add -f 忽略文件或目录
    检查.gitignore忽略文件或目录：
        > git check-ignore -v 测试文件或目录   # 测试存在情况
配置命令别名：
    > git config --global alias.别名 原名   # 原名可为'命令字符串'
    配置git时，--global针对当前用户，不加则只针对当前仓库
    当前仓库配置文件:.git/config
        追加：
        [alias]
        别名 = 原名
        ...
    当前用户配置文件：用户主目录下隐藏.gitconfig文件
        [alias]
        ...
        [user]
            name = 7csn
            email = 1479672753@qq.com