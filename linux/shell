1. 单引、双引、反引
    '   单引 不转义         例：a=1; b='${a}2'; echo $b => ${a}2
    "   双引 转义           例：a=1; b="${a}2"; echo $b => 12
    `   反引 返回命令结果    例：a=1; b=`echo $a`; echo $b => 1
    注：
        `命令` <=> $(命令)
2. 重定向、覆盖
    输入与输出：
        0 标准输入(默认键盘)
        1 标准输出(默认屏幕)
        2 错误输出
    >   重定向     重定向输出(若输出对象为文件,覆盖,无则创建)
    >>  覆盖       追加(若对象为文件,无则创建)
    注：
        > test      #清空test文件
        seq 100     #输出1~100(换行),步长为1
        seq 1 3 100 #同上,步长为3
3. 管道
    |   管道  管道前者输出作为管道后者输入
    注：
        history|cut -d' ' -f2|sort|unqid -c|sort -nr|head       #最近常用10个命令
        history|awk '{print $2}'|sort|unqid -c|sort -nr|head    #同上
        ifconfig|grep Bcast|awk -F'[ :]+' '{print $4}'          #获取IP
        cat test|grep -v ^$|tac|cat -n                          #文件去除空行,行反序,显示行号
            history #查看历史指令
            cut         #-d指定分隔符(单引) -f指定列
            awk         #'{命令}' -F指定分隔符(单引,可正则) $指定列
            sort        #排序(默认从小到大) -n按数字排序 -r反序
            unqid       #删除临近重复行 -c显示重复行数
            head        #获取前10行 -n获取前n行
            grep        #-v清除匹配行 -o剔除非匹配内容(多处匹配换行) 匹配项可正则
            tac         #行反序
            wc -l       #统计行数
            tr '1' '0'  #把1换成0
4. 别名
    alias               #显示已有别名
    alias '新命令=旧命令' #设置别名,重启无效
    永久有效：
        1. 修改全局文件/etc/profile,不推荐
        2. 修改家目录.bashrc文件,重启有效,可执行source .bashrc或. .bashrc生效
    注：
        halt     #关机
5. 终端录制
    开始录制
        script -a action.log -t 2> time.log    #指令结果存action.log,时间记录存time.log
    结束录制：按ctrl+d
    播放录制
        scriptreplay time.log action.log       #出现exit时完毕
6. 数学计算
    以下计算无小数位：
        echo $((表达式))    #输出计算结果;推荐
        echo $[表达式]      #同上
        echo 表达式 |bc     #同上,且表达式中*号转义\*
        expr 表达式         #同上,且运算符前后空格
        let 等式            #赋值
    注：
        man 指令            #查看指令详情,按q退出
7. 伪随机数
    echo $RANDOM        #5位以内随机数
    echo $RANDOM|md5sum #32位随机串
8. 任务暂停、结束、前后台
    按ctrl+z    #任务暂停
    按ctrl+c    #任务结束
    jobs        #查看暂停任务
    fg          #首个任务前台 %n指定第n个前台
    bg          #首个任务后台,有运行提示信息 %n指定第n个后台
    注：
        按ctrl+d #退出当前用户
9. 三种括号
    ;               #将语句隔开,相当于换行
    (命令)           #子shell运行;子shell可以获取父shell变量,反之不行;子shell无法修改父shell变量
    $((运算))        #返回数学计算结果
    {1..100}        #1~100,序列
        例：
            touch test{1..9}  #创建文件test1~test9
            cp test{,.bak}  #快速备份test文件
    [1-9]           #1~9中任意一个,须有对象,同[123456789]
        例：
            rm -rf test[1-9]  #删除test1~test9
10. 内置变量
    $RANDOM     #随机数
    $PATH       #环境变量,临时有效
        永久有效：修改全局文件/etc/profile,或修改开机启动的一些文件
    $LANG       #语言
    $?          #上个命令返回数,0为正常,其他异常
    $PS1        #提示符,默认为[用户@主机 当前目录名]
    注：
        命令 > /de/null 2>&1  #命令标准输出导入垃圾箱,错误输出同标准输出
11. cat写入文件
    cat >> test << EOF  #进入文件追加模式,可以tab补全,EOF回车退出
    cat >> test         #进入文件追加模式,不可以tab补全,回车并按ctrl+d退出


shell编程
    例：go.sh文件
        #!/bin/bash     # 申明解释器，用/bin/bash解释
        cd
        pwd
    1. 变量
        1. 自定义变量
            例：x=y;echo $x   # y
        2. 系统变量
            例：$PATH
        3. 命令返回值变量
            例：x=`date +%y%m%d`;echo $x
    2. 表达式
        1. 命令表达式
        2. 数学表达式
            [ $var1 -gt/-lt/-ge/-le/-eq/-ne $var2 ]
                -gt >
                -lt <
                -ge >=
                -le <=
                -eq =
                -ne !=
        3. 字符串表判断达式
            [ $var1 =/!= $var2 ]
        4. 文件表达式
            [ -d/-f/-e/-r/-w/-x filename ]
                -d 是否目录
                -f 是否文件
                -e 是否存在
                -r 是否可读
                -w 是否可写
                -x 是否可执行
            [ file1 -nt/-ot file2 ]
                -nt 是否更新
                -ot 是否更旧
    3. 控制结构
        1. if/else结构
            if 表达式
            then
            ...
            elseif
            then
            ...
            else
            ...
            fi
        2. for结构
            1. bash 风格
                for 变量名 in 值1 值2 ... 值n
                do
                ...
                done
            2. C语言风格
                for((变量名=初值;变量名<=n;变量名++))
                do
                ...
                done
        3. case结构
            case 变量 in
            可能性1)
            ...
            ;;
            可能性2)
            ...
            ;;
            ...
            *)
            ...
            ;;
            esac

定时任务
    crontab -l  # 查看定时任务
    crontab -e  # 进入定时任务编辑
    格式：分 时 日 月 周 命令
    分时日月周可用*代表不限

数据库备份实例
    go.sh：
        #!/bin/bash
        tmp='/home/csn/tmp'
        old=`date -d '-3 day' +%Y%m%d`
        new=`date +%Y%m%d`
        /usr/local/mysql/bin/mysqldump -uroot -pRoot123! -B test > $tmp/test.sql
        tar zcf $tmp/$new.tar.gz $tmp/test.sql
        if [ -f $tmp/$old.tar.gz ]
        then
        rm -rf $tmp/$old.tar.gz
        fi
    crontab -e
    0 0 * * * /home/csn/go.sh

