I/O模型：
    一个进程通常只能处理一个IO
    blocking IO         阻塞IO
    nonblocking IO      非阻塞IO
        磁盘到内核：忙等待（轮询）
    IO multiplexing     复用型IO
        请求提交给内核中的代理，代理（代理支持多个IO）和内核沟通
        select()限制1024请求,poll()
        能处理更多请求，并非提升性能
    signal driven IO    事件驱动式IO
        新版2.4支持异步IO
        磁盘到内核：不等待，完成后内核通知进程
        通知：
            水平触发：多次通知
            边缘触发：只通知一次
        nginx:事件驱动IO边缘触发，且支持异步IO
    asynchronous IO     异步IO
        IO：全部由内核处理，处理完通知进程
        因为进程和内核会缓存资源，多次请求（静态），直接读取内存，性能提升很大
        弊端：内核通知时，进程被别的IO阻塞，信号消失。

    例：一次read操作
        1. 进程向发出内核请求（用户空间进程无权访问磁盘）
        2. IO:内核将磁盘数据加载至内核内存，内核将数据复制一份到进程（进程数据独享）
        数据:磁盘-->内核内存-->进程内存