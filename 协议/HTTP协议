1.命令窗口
    1.1 建立连接
        telnet 域名[/IP] 端口 回车 按Ctrl+]键 回车
	例：
	    telnet 127.0.0.1 80 回车 按Ctrl+]键 回车
    1.2 请求与响应格式
        1.2.1 请求格式
            请求行(请求方法 路径 协议)
            头信息(k:v方式)
            空行
            主体信息(可选)(发送内容)
        1.2.2 响应格式
            响应行(协议 状态码 状态文字)
            响应头信息(k:v格式)
            空行
            主体信息(可能没有)
	    例：
	        请求：
                POST /index.php HTTP/1.1
                Host:test.com
                Content-Type: application/x-www-form-urlencoded     # POST提交参数需此项
                Content-Length:5                                    # POST时添加

                age=5
            响应：
                HTTP/1.1 200 OK
                Server: nginx/1.11.5
                Date: Mon, 05 Feb 2018 03:37:06 GMT
                Content-Type: text/html; charset=UTF-8
                Transfer-Encoding: chunked
                Connection: keep-alive
                Vary: Accept-Encoding
                X-Powered-By: PHP/7.0.12

                8           # 主体长度(十六进制)
                age is 5    # 主体信息
                0
    1.3 请求方法、状态码
        1.3.1 请求方法
            OPTIONS     查询服务器支持的方法(请求url须为不存在资源，伪静态可能无效果)
            例：
                OPTIONS /5a77d6659228a HTTP/1.1
                Host:test.com

                HTTP/1.1 200 OK
                Date: Mon, 05 Feb 2018 03:58:41 GMT
                Server: Apache/2.4.23 (Win32) OpenSSL/1.0.2j mod_fcgid/2.3.9
                Allow: OPTIONS,GET,HEAD,POST,TRACE
                Content-Length:


            HEAD        获取一个指定资源的信息
                HEAD / HTTP/1.1
                Host:test.com

                HTTP/1.1 200 OK
                Server: nginx/1.11.5
                Date: Mon, 05 Feb 2018 04:12:02 GMT
                Content-Type: text/html
                Connection: keep-alive
                Vary: Accept-Encoding
                X-Powered-By: PHP/5.4.45


            GET         获取一个URL指定的资源,即资源实体
            POST        向服务器提交数据
            PUT         向服务器提交资源
            DELETE      请求源服务器删除Request-URI标识的资源
            TRACE       网络跟踪
            CONNECT     与PROXY之间的连接管理
        1.3.2 状态码
            1.3.2.1 状态码说明
                状态码   定义          说明
                1XX     请求被接受     通常用于实验环境
                2XX     成功          操作成功地收到，理解和接受
                3XX     重定向　　     为了完成请求，必须采取进一步措施
                4XX     客户端错误     请求的语法有错误或不能完全被满足
                5XX     服务端错误     服务器无法完成明显有效的请求
            1.3.2.2 常见状态码
                200     服务器成功返回网页
                301/2   永久/临时重定向
                304     Not Modified– 未修改
                307     重定向中保持原有的请求数据
                404     请求的网页不存在
                503     服务器暂时不可用
                500     服务器内部错误
    1.4 表单上传
        方法：POST
        分隔符：自定义，唯一性(以CsnTsyx为例)
        头信息必须：
            Content-Type: multipart/form-data, boundary=CsnTsyx
            Content-length: ...
        数据类型：
            1. 表单(type='text')：
                --CsnTsyx
                Content-Disposition: form-data; name=""
                空行
                表单数据
            2. 文件(type='file')
                --CsnTsyx
                Content-Disposition: form-data; name=""; filename=""
                Content-Type: ...
                Content-Transfer-Encoding: binary   # 二进制文件需此项
                空行
                文件内容
            注：
                结束符(--CsnTsyx--)
        文件格式：
            xml     application/xml  text/xml  application/x-xml
            json    application/json  text/x-json  application/jsonrequest  text/json
            js      text/javascript  application/javascript  application/x-javascript
            css     text/css
            rss     application/rss+xml
            yaml    application/x-yaml  text/yaml
            atom    application/atom+xml
            pdf     application/pdf
            text    text/plain
            png     image/png
            jpg     image/jpg  image/jpeg  image/pjpeg
            gif     image/gif
            csv     text/csv
            html    text/html  application/xhtml+xml  */*
        例：
            POST / HTTP/1.1
            Host:test.com
            Content-Type: multipart/form-data, boundary=CsnTsyx
            Content-Length:196

            --CsnTsyx
            Content-Disposition: form-data; name="user"

            ChenDa
            --CsnTsyx
            Content-Disposition: form-data; name="file"; filename="file.txt"
            Content-Type: text/plain

            this is file
            --CsnTsyx--
        注：
            1. 不同的编辑工具，换行不同。例：phpstorm为\n；记事本为\r\n。
            2. 命令行换行：window为\r\n；linux为\n。
            3. \r\n长度为2；\n长度为1。
        上传相关：
            $_FILES[文件名]数组:
                name       显示客户端文件的原名称。
                type       文件的 MIME 类型，例如"image/gif"。
                size       已上传文件的大小，单位为字节。
                tmp_name   储存的临时文件名，一般是系统默认。
                error      该文件上传相关的错误代码。以下为不同代码代表的意思：
                                0; 文件上传成功。
                                1; 超过了文件大小php.ini中即系统设定的大小。upload_max_filesize = 20M
                                2; 超过了文件大小。
                                3; 文件只有部分被上传。
                                4; 没有文件被上传。
                                5; 上传文件大小为0。
            php.ini设置：
                1. post_max_size = 10M              　# 表单提交数据上限
                2.file_uploads = On　               　# 文件上传开关On/Off
                3.upload_tmp_dir = "上传文件缓存目录"　　# 注意磁盘空间
                4.upload_max_filesize = 2M            # 文件最大限制
    1.5 cookie本质
        浏览器请求php页面，携带cookie(Cookie: a=b; x=y)头信息，PHP解析为$_COOKIE。
        PHP修改$_COOKIE，服务器响应set-cookie(Set-Cookie: a=b)(Set-Cookie: x=y)头信息，浏览器解析该信息，修改cookie文件，并于下次请求时，携带新的cookie头信息。
        cookie在http中，就是一个头信息。具体表现为，客户端的cookie文件。
2.PHP代码
    $fp = fsockopen('test.com', 80, $errno, $errstr, 5);    // 限时5秒
    $request = "OPTIONS / HTTP/1.1\nHost: test.com\n\n";    // http请求字符串
    fputs($fp, $request);
    $str = '';
    while (!feof($fp)) {
        $str .= fread($fp, 1024);
    }
    fclose($fp);
POST /test HTTP/1.1
Host: chaser.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.9
Cache-Control: max-age=0
Connection: keep-alive
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36
Content-type: application/x-www-form-urlencoded
Content-length: 15

usr=123&pwd=abc

POST /test HTTP/1.1
Host: chaser.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.9
Cache-Control: max-age=0
Connection: keep-alive
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36
Content-type: application/x-www-form-urlencoded
Content-length: 15

usr=123&pwd=abc