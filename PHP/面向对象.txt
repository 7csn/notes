面向过程编程（pop）
面向对象编程（oop）
面向切面编程（aop）


都是编程范式：编程时所秉承的思想和风格，有各自优点，适合场景不同，没有绝对好坏。


POP

    只关注“怎么做”，即完成任务的具体细节。

    将任务拆分成一个个步骤，用函数把这些步骤一步步实现，再一一调用函数，完成任务。


OOP

    主要关注“谁来做”，即完成任务的对象，而非细节。

    从一个任务中抽取出各个角色（对象），这些角色分别提供了一些能力；对象互相配合，完成任务。

    好处是：各对象可通过不同的组合，完成不同的任务，这样可以提升代码重用，做好代码分类和分级。

    三大特性：
        封装：某些信息隐藏再类内部，不运行外部程序直接访问，通过类提供的方法访问
        继承：类与类的一种关系，子类拥有父类的所有属性和方法（除了private修饰的属性），从而实现代码复用。
        多态：
            引用多态：父类引用可以指向本类对象，也可指向子类对象
            方法多态：子类中可重写父类的方法，调用方法时根据引用指向的子类对象决定调用哪个具体的方法

    五大基本原则：
        单一职责（类功能单一）
        开放封闭（扩展开放、修改关闭）
        里氏替换（子类代替父类使用）
        依赖倒置（具体依赖抽象，上层依赖下层）
        接口分离（模块间通过接口隔离，而非通过具体类强耦合）

AOP（对 OOP 的补充、升级）

    基于 OOP 延申出来的编程思想，进一步降低项目合作、维护、扩展、多人协作的成本，提高程序的内聚性，降低程序的耦合度。

    例如：中间件、拦截器、装饰器、代理

    通过找到平整切面的形式，插入新的代码，使新插入的代码对切面上下原有流程的伤害降到最低。



